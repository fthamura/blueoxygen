<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- Build file for BlueOxygen  -->

<project name="cimande" default="compile" basedir="..">

    <!-- Give user a chance to override without editing this file 
         (and without typing -D each time they invoke a target) -->    

	   <property file="${basedir}/build/build.properties" />
		<property file="${basedir}/build/db.properties" />
  
    <!-- Generic project properties -->

    <property name="project.fullname" value="BlueOxygen Cimande Project"/>
    <property name="project.name" value="cimande"/>
    
    <property name="project.version" value="1.2.1"/>      
    
    <!-- Directory settings -->
    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.java.dir" value="${src.dir}/java"/> 
	<property name="src.view.dir" value="${src.dir}/template/view"/>
    <property name="src.config.dir"   location="${src.dir}/config"/>

    <property name="build.dir" value="${basedir}"/>
    <property name="build.dest.dir" value="${build.dir}/generated/classes"/>
	<!-- -->


	
    <property name="build.dest.jar.dir" value="${basedir}/WebContent/WEB-INF/lib"/>
    

	<!-- if you want to deploy to another lib 
	<property name="build.dest.jar.dir" value="C:\blueoxygen\papaje\WebContent\WEB-INF\lib"/>
	-->
	<property name="build.dest.dir" value="${build.dir}/classes"/>

    <property name="lib.dir" value="WebContent/WEB-INF/lib"/>   
    <property name="docs.dir" value="docs"/>
    <property name="javadocs.destdir" value="${docs.dir}/api"/>
    <property name="release.dir" value="${project.name}-${project.version}/"/>    
    <property name="install.war" value="${build.dir}/webapp"/>
    <property name="locale.default" value="en"/>
    
    <!-- Miscellaneous settings -->

    <property name="locale.default" value="en"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>  
    
    <!-- Anakia doc settings -->
    <property name="docs.dest" value="docs"/>
    <property name="docs.src" value="xdocs"/>  

    <!-- =================================================================== -->
    <!-- Builds Classpath                                                    -->
    <!-- =================================================================== -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
	<!-- Generator Library such as XDoclet for compiling only-->
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
    

    </path>
 
    <!-- =================================================================== -->
    <!-- Initializes the build.                                              -->
    <!-- =================================================================== -->    
    <target name="init" description="Initialization">

        <!-- So that we can use the ${TSTAMP}, ${DSTAMP}, ... time stamps
             in targets, if need be -->
        <tstamp/>

        <echo message="---------- ${project.fullname} version ${project.version} ----------"/>
        <echo message=""/>
        
        <echo message="java.class.path = ${java.class.path}"/>        
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message=""/>
        <echo message="basedir = ${basedir}"/>
        <echo message=""/>        
        <echo message="src.java.dir= ${src.java.dir}"/>
        <echo message=""/>        
        <echo message="build.dir= ${build.dir}"/>

    	<echo message=""/>        
	  <echo message="locale.default = ${locale.default}"/>

    </target>

    <!-- ================================================================== -->
    <!-- Displays usage information                                         -->
    <!-- ================================================================== -->
    <target name="usage" description="Displays usage information">
        <echo message="Use -projecthelp to see the available targets"/>
    </target>
        
    <!-- ================================================================== -->
    <!-- Perform clean, fetch, build, test, docs, and deploy     	    -->
    <!-- ================================================================== -->
    <target name="all" description="Calling All Target " depends="init, build, test">
        <echo message="Calling all the targets"/>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans up the distribution                                          -->
    <!-- =================================================================== -->
    <target name="clean" description="Cleans up the distribution" >
    	<echo message="Clean out the output directories"/>
    	<delete quiet="true" includeEmptyDirs="true" failonerror="false">
        	<fileset dir="${build.dest.dir}" />
        	
        </delete>
    </target>

    <!-- =================================================================== -->
    <!-- Get the latest source code from the CVS tree                        -->
    <!-- =================================================================== -->
    <target name="fetch" description="Get the latest source from the CVS tree" >
    	<echo message="Get the latest source from the CVS tree"/>
    </target>

    <!-- =================================================================== -->
    <!-- Build the distribution                                              -->
    <!-- =================================================================== -->
    <target name="build" depends="init" description="Build the distribution" >
    	<echo message="Compiling all the code"/>
    	
        <echo message=""/>        
        <echo message="src.java.dir= ${src.java.dir}"/>
        <echo message=""/>        
        <echo message="build.dest.dir= ${build.dest.dir}"/>

        <mkdir dir="${build.dest.dir}"/>
    	
        <javac 
            classpathref="classpath"
            srcdir="${src.java.dir}/" 
            destdir="${build.dest.dir}" 
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">            
        </javac>
    	<mkdir dir="${build.dest.dir}/view"/>
        <copy todir="${build.dest.dir}/view">
            <fileset dir="${src.view.dir}" />
        </copy>
                   
    </target>

    <!-- =================================================================== -->
    <!-- Generate JavaDoc Documentation                                      -->
    <!-- =================================================================== -->
    	<target 
        name="javadocs" depends="build" 
        description="Generates the project's API documentation"
    >
        <mkdir dir="${javadocs.destdir}"/>
        
        <javadoc        
            sourcepath="${src.java.dir}" 
            destdir="${javadocs.destdir}"
            packagenames="org.blueoxygen.*"
            author="true"
            private="false"
            version="true"
            use="true"
            windowtitle="${project.fullname} API"
            doctitle="${project.fullname}"                
            bottom="Copyright &#169; ${year}, BlueOxygen Foundation. All Rights Reserved."
        >
            <classpath refid="classpath"/>
        </javadoc>

    </target>

    <!-- =================================================================== -->
    <!-- Ship the JARs, WARs and soon to the execution                       -->
    <!-- =================================================================== -->
    <target name="deploy" description="Ship the binary to the execution" >
    	<echo message="Deploying the code"/>
    </target>

    <!-- =================================================================== -->
    <!-- Run the junit test                                                  -->
    <!-- =================================================================== -->
    <target name="test" description="Test the distribution" >
    	<echo message="Testing"/>
    </target>

	
    <target name="config" depends="build" description="Generate and assemble configuration">
    	<!--

        
        <copy todir="${build.dest.dir}">
            <fileset dir="${src.config.dir}" includes="*"/>
        </copy>
    	
        <copy todir="${build.dest.dir}">
            <fileset dir="${src.java.dir}" includes="**/*.xml"/>
        </copy>
    	<copy todir="${build.dest.dir}">
    	            <fileset dir="${src.java.dir}" includes="**/*.properties"/>
    	</copy>
    	-->
    </target>


    <target name="update-schema" depends="config" description="Update the database schema">
        <path id="update.schema.classpath">
            <path refid="classpath"/>
            <pathelement path="${build.dest.dir}"/>
            <pathelement path="${src.config.dir}"/>
        </path>

        <taskdef name="update-schema" classpathref="update.schema.classpath"
                 classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"/>

        <update-schema quiet="no" text="no" drop="no" config="/hibernate.cfg.xml" />
        <echo message="Cimande schema updated"/>
    </target>

   <target name="create-schema" 
   		description="Generates DB schema with hbm2ddl." 
        depends="build">
  
   	<mkdir dir="${build.dir}/generated/sql"/>
   	<taskdef classpathref="classpath"  name="hibernatetool" 
   	classname="org.hibernate.tool.ant.HibernateToolTask" />


   	            
   	    
   	<hibernatetool destdir="${build.dir}/generated/sql">
   	 <annotationconfiguration
   	  		configurationfile="${build.dir}/src/config/hibernate.cfg.xml"/>
   		
   	 	<!-- list exporters here -->
        <!-- outputfilename="cimande-schema.ddl" -->
   		
   		<hbm2ddl 
   			export="true" 
   			update="true"
   		 	delimiter=";"
   		 	format="true"
   		/>
   	</hibernatetool>
   	
    </target>

    <target name="compile" description="Compile Everything" depends="clean, init, build, config">
		
    </target>

    <target name="create-jar" description="Create JAR" depends="compile">
        <echo>Copy struts xml files to classes</echo>
 		<copy todir="${build.dest.dir}">
             <fileset dir="${src.java.dir}" includes="*"/>
         </copy>
    	<!-- Create Jar -->
    	<jar
        jarfile="${build.dest.jar.dir}/${project.name}-${project.version}.jar" 
        basedir="${build.dest.dir}"       
        />
    </target>
	
	 <!-- =================================================================== -->
	    <!-- Export from Database to XML                        -->
	    <!-- =================================================================== -->
	    <target name="dbexport" description="dump database to xml" depends="init">
	    	<echo message="Dump Database to XML"/>
	    	<mkdir dir="${build.dir}/generated/dbxml"/>
	    	<taskdef classpathref="classpath" name="dbunit" classname="org.dbunit.ant.DbUnitTask"/>
	    	<dbunit driver="${db.driver}"          
	    			    	        url="${db.url}"          
	    			    	        userid="${db.user}"          
	    			    	        password="${db.password}">
	    	   	
	    	    <export dest="${build.dir}/src/sqlcimande-1.2.1-export.xml"/> 
	    	</dbunit>
	    </target>
	
	<!-- =================================================================== -->
		    <!-- Import from XML to Database		-->
		    <!-- =================================================================== -->
		  
	<target name="dbimport" description="fill database from xml" >
		    	<echo message="Fill Dump Database to XML"/>

		    	<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="classpath" />
		    	<dbunit driver="${db.driver}"          
		    	        url="${db.url}"          
		    	        userid="${db.user}"          
		    	        password="${db.password}">
		    		<operation type="INSERT" src="${build.dir}/src/sql/cimande-1.2.1-export.xml"/> 
		  
		    	</dbunit>
		    </target>
</project>
